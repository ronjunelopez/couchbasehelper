package suites.ronscript.couchbasehelper;

import android.content.Context;
import android.util.Log;

import com.couchbase.lite.BasicAuthenticator;
import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.DataSource;
import com.couchbase.lite.Database;
import com.couchbase.lite.DatabaseConfiguration;
import com.couchbase.lite.Document;
import com.couchbase.lite.Endpoint;
import com.couchbase.lite.Expression;
import com.couchbase.lite.MutableDocument;
import com.couchbase.lite.Query;
import com.couchbase.lite.QueryBuilder;
import com.couchbase.lite.Replicator;
import com.couchbase.lite.ReplicatorChange;
import com.couchbase.lite.ReplicatorChangeListener;
import com.couchbase.lite.ReplicatorConfiguration;
import com.couchbase.lite.ResultSet;
import com.couchbase.lite.SelectResult;
import com.couchbase.lite.URLEndpoint;

import java.net.URI;
import java.net.URISyntaxException;

/*
    @link https://medium.com/exploring-code/how-to-make-the-perfect-singleton-de6b951dfdb0
    pros - thread, reflection and serialization safe
    cons - clone, multiple class loaders not safe
 */
public class DbUtils {

    public static volatile String TAG = "";

    private static volatile DbUtils instance = new DbUtils();

    //private constructor.
    private DbUtils() {
        //Prevent form the reflection api.
        if (instance != null) {
            throw new RuntimeException("Use getInstance() method to get the single instance of this class.");
        }
    }

    public static DbUtils getInstance() {
        if (instance == null) { //if there is no instance available... create new one
            synchronized (DbUtils.class) {   //Check for the second time.
                //if there is no instance available... create new one
                if (instance == null) instance = new DbUtils();
            }
        }

        return instance;
    }

    //Make singleton from serialize and deserialize operation.
    protected DbUtils readResolve() {
        return getInstance();
    }


    public static void connect(Context context) {
        // Get the database (and create it if it doesnâ€™t exist).
        DatabaseConfiguration config = new DatabaseConfiguration(context);
        Database database = null;
        try {
            database = new Database("local_jdi", config);

// Create a new document (i.e. a record) in the database.
            MutableDocument mutableDoc = new MutableDocument()
                    .setFloat("version", 2.0F)
                    .setString("type", "SDK");

// Save it to the database.
            database.save(mutableDoc);

// Update a document.
            mutableDoc = database.getDocument(mutableDoc.getId()).toMutable();
            mutableDoc.setString("language", "Java");
            database.save(mutableDoc);
            Document document = database.getDocument(mutableDoc.getId());
// Log the document ID (generated by the database) and properties
            Log.i(TAG, "Document ID :: " + document.getId());
            Log.i(TAG, "Learning " + document.getString("language"));

// Create a query to fetch documents of type SDK.
            Query query = QueryBuilder.select(SelectResult.all())
                    .from(DataSource.database(database))
                    .where(Expression.property("type").equalTo(Expression.string("SDK")));
            ResultSet result = query.execute();
            Log.i(TAG, "Number of rows ::  " + result.allResults().size());

        } catch (CouchbaseLiteException e) {
            e.printStackTrace();
        }
// Create replicators to push and pull changes to and from the cloud.
        Endpoint targetEndpoint = null;
        try {
            targetEndpoint = new URLEndpoint(new URI("ws://10.0.0.93:4984/local_jdi"));
            ReplicatorConfiguration replConfig = new ReplicatorConfiguration(database, targetEndpoint);
            replConfig.setReplicatorType(ReplicatorConfiguration.ReplicatorType.PUSH_AND_PULL);

// Add authentication.
            replConfig.setAuthenticator(new BasicAuthenticator("john", "pass"));

// Create replicator.
            Replicator replicator = new Replicator(replConfig);

// Listen to replicator change events.
            replicator.addChangeListener(new ReplicatorChangeListener() {
                @Override
                public void changed(ReplicatorChange change) {
                    if (change.getStatus().getError() != null)
                        Log.i(TAG, "Error code ::  " + change.getStatus().getError().getCode());
                }
            });

// Start replication.
            replicator.start();

        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
    }

}
